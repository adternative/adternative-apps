extends ../../../views/layout

block content
  - const hasEntity = entity && entity.name;
  if !hasEntity
    div(class="bg-white rounded-3xl shadow-sm ring-1 ring-gray-200 p-12 text-center space-y-4")
      i(data-lucide="radar" class="w-12 h-12 mx-auto text-purple-500")
      h2(class="text-2xl font-semibold text-gray-900") CORE requires an active entity
      p(class="text-gray-600 max-w-md mx-auto") Select or create an entity to load personalised recommendations for CORE.
      a(href="/?openEntityModal=1" class="inline-flex items-center px-4 py-2 rounded-xl bg-purple-600 text-white font-medium hover:bg-purple-700 transition")
        i(data-lucide="plus" class="w-4 h-4 mr-2")
        | Create entity
  else
    - const formattedUpdatedAt = updatedAt ? new Date(updatedAt).toLocaleString() : 'just now';
    - const channelScores = Array.isArray(scores) ? scores : [];
    - const budgetAllocation = Array.isArray(allocation) ? allocation : [];
    - const topScores = channelScores.slice(0, 5);
    - const analyticsTraffic = analytics && analytics.traffic ? analytics.traffic : {};
    - const trafficSessions = Number(analyticsTraffic.sessions) || 0;
    - const trafficVisitors = Number(analyticsTraffic.uniqueVisitors) || 0;
    - const trafficGrowth = typeof analyticsTraffic.growthRate === 'number' ? analyticsTraffic.growthRate : 0;
    - const outcomesTotals = (outcomes && typeof outcomes === 'object' && outcomes.totals) ? outcomes.totals : {};
    - const outcomesEntries = Object.entries(outcomesTotals);
    - const benchmarkEntry = benchmark || null;
    - const socialEntries = socialSignals && typeof socialSignals === 'object' ? Object.entries(socialSignals) : [];
    - const platformEntries = platformSignals && typeof platformSignals === 'object' ? Object.entries(platformSignals) : [];
    - const formattedGoals = entity && (entity.goals || entity.goal) ? (entity.goals || entity.goal) : 'Growth';
    - const regionLabel = entity && entity.region ? entity.region : 'Multi-region';
    - const audienceData = analytics && analytics.audience ? analytics.audience : {};
    - const topCountries = Array.isArray(audienceData.topCountries) ? audienceData.topCountries.slice(0, 3) : [];
    div(class="space-y-8")
      div(class="bg-white rounded-3xl shadow-sm ring-1 ring-gray-200 p-8")
        div(class="flex flex-wrap items-start justify-between gap-6")
          div(class="space-y-3")
            div(class="flex flex-wrap items-center gap-3 text-xs font-semibold uppercase tracking-wide text-purple-700")
              span(class="inline-flex items-center px-3 py-1 rounded-full bg-purple-100 text-purple-700")
                i(data-lucide="gauge" class="w-3 h-3 mr-1")
                | CORE Intelligence
              span(class="inline-flex items-center px-3 py-1 rounded-full bg-teal-100 text-teal-700")
                | #{refreshed ? 'Live snapshot' : 'Cached snapshot'}
            h1(class="text-3xl font-semibold text-gray-900")= entity.name
            p(class="text-gray-600 max-w-2xl")
              | Adaptive media planner for #{entity.industry || 'multi-vertical'} brands Â· Updated #{formattedUpdatedAt}
          div(class="flex flex-col items-start gap-3 sm:flex-row sm:items-center")
            button(type="button" id="coreRefreshBtn" class="inline-flex items-center px-4 py-2 rounded-xl bg-teal-500 text-white font-medium shadow-sm hover:bg-teal-600 transition focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500")
              i(data-lucide="refresh-cw" class="w-4 h-4 mr-2")
              | Refresh insights
            a(href="/core/api/summary" class="inline-flex items-center px-4 py-2 rounded-xl border border-gray-300 text-gray-700 font-medium hover:bg-gray-50 transition focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-300")
              i(data-lucide="download" class="w-4 h-4 mr-2")
              | Download summary
        p(id="coreRefreshStatus" class="text-sm text-gray-500 mt-6") #{refreshed ? 'Using the most recent recommendation bundle.' : 'Serving the last saved recommendation. Refresh to regenerate.'}
      div(class="grid grid-cols-1 md:grid-cols-3 gap-6")
        div(class="bg-white rounded-3xl shadow-sm ring-1 ring-gray-200 p-6")
          div(class="flex items-center justify-between mb-4")
            span(class="text-sm text-gray-500") Monthly sessions
            i(data-lucide="activity" class="w-4 h-4 text-gray-400")
          p(class="text-3xl font-semibold text-gray-900")= trafficSessions.toLocaleString()
          span(class="inline-flex items-center mt-3 text-sm font-medium " + (trafficGrowth >= 0 ? 'text-emerald-600' : 'text-rose-600'))
            i(data-lucide=trafficGrowth >= 0 ? 'arrow-up-right' : 'arrow-down-right' class="w-4 h-4 mr-1")
            | #{Math.round(Math.abs(trafficGrowth) * 100)}%
            span(class="ml-1 text-gray-500 font-normal") vs last 30 days
        div(class="bg-white rounded-3xl shadow-sm ring-1 ring-gray-200 p-6")
          div(class="flex items-center justify-between mb-4")
            span(class="text-sm text-gray-500") Unique visitors
            i(data-lucide="users" class="w-4 h-4 text-gray-400")
          p(class="text-3xl font-semibold text-gray-900")= trafficVisitors.toLocaleString()
          span(class="text-sm text-gray-500 mt-3 block") #{topCountries.length ? 'Top regions: ' + topCountries.join(', ') : 'Audience scanning in progress'}
        div(class="bg-white rounded-3xl shadow-sm ring-1 ring-gray-200 p-6")
          div(class="flex items-center justify-between mb-4")
            span(class="text-sm text-gray-500") Entity focus
            i(data-lucide="compass" class="w-4 h-4 text-gray-400")
          dl(class="space-y-3")
            div
              dt(class="text-xs uppercase tracking-wide text-gray-500") Strategic goal
              dd(class="text-lg font-semibold text-gray-900")= formattedGoals
            div
              dt(class="text-xs uppercase tracking-wide text-gray-500") Primary region
              dd(class="text-lg font-semibold text-gray-900")= regionLabel
      div(class="grid grid-cols-1 xl:grid-cols-2 gap-6")
        div(class="bg-white rounded-3xl shadow-sm ring-1 ring-gray-200 p-6")
          div(class="flex items-center justify-between mb-4")
            h2(class="text-lg font-semibold text-gray-900") Channel ranking
            span(class="text-xs font-medium text-gray-400") Based on CORE scoring
          if channelScores.length
            canvas#coreChannelChart
          else
            div(class="text-sm text-gray-500") Scoring data is not available yet. Refresh to generate a recommendation.
        div(class="bg-white rounded-3xl shadow-sm ring-1 ring-gray-200 p-6")
          div(class="flex items-center justify-between mb-4")
            h2(class="text-lg font-semibold text-gray-900") Budget allocation
            span(class="text-xs font-medium text-gray-400") Recommended monthly split
          if budgetAllocation.length
            canvas#coreBudgetChart
          else
            div(class="text-sm text-gray-500") Allocation will appear once a recommendation is generated.
      div(class="grid grid-cols-1 xl:grid-cols-3 gap-6")
        div(class="bg-white rounded-3xl shadow-sm ring-1 ring-gray-200 p-6 space-y-4")
          h2(class="text-lg font-semibold text-gray-900") Projected outcomes
          if outcomesEntries.length
            ul(class="divide-y divide-gray-100")
              each outcome in outcomesEntries
                - const [label, rawValue] = outcome;
                - const title = label ? String(label) : '';
                - const value = Number(rawValue || 0);
                li(class="flex items-center justify-between py-3")
                  span(class="text-sm font-medium text-gray-500")= title.charAt(0).toUpperCase() + title.slice(1)
                  span(class="text-base font-semibold text-gray-900")= value.toLocaleString()
          else
            p(class="text-sm text-gray-500") Outcome modelling will populate after the first recommendation run.
        div(class="bg-white rounded-3xl shadow-sm ring-1 ring-gray-200 p-6 space-y-4")
          h2(class="text-lg font-semibold text-gray-900") AI narrative
          if aiNarrative
            p(class="text-sm leading-relaxed text-gray-700 whitespace-pre-line")= aiNarrative
          else
            p(class="text-sm text-gray-500") CORE is preparing narrative insights. You can refresh to request a new explanation.
        div(class="bg-white rounded-3xl shadow-sm ring-1 ring-gray-200 p-6 space-y-4")
          h2(class="text-lg font-semibold text-gray-900") Market signals
          if benchmarkEntry
            div
              p(class="text-sm text-gray-500 mb-2") Industry benchmark: #{benchmarkEntry.industry || 'general market'}
              ul(class="grid grid-cols-1 gap-2")
                each metricVal, metricKey in benchmarkEntry.metrics || {}
                  - const metricName = String(metricKey || '').replace(/_/g, ' ');
                  li(class="flex items-center justify-between text-sm text-gray-600 bg-gray-50 rounded-lg px-3 py-2")
                    span= metricName
                    span(class="font-semibold text-gray-900")= typeof metricVal === 'number' ? metricVal : metricVal
          if socialEntries.length
            div
              h3(class="text-xs font-semibold text-gray-400 uppercase tracking-wide mb-2") Social reach
              ul(class="space-y-2")
                each social in socialEntries.slice(0, 3)
                  - const platformKey = social[0];
                  - const socialData = social[1] || {};
                  - const platformName = platformKey ? String(platformKey).replace(/_/g, ' ') : 'platform';
                  li(class="flex items-center justify-between text-sm text-gray-600 bg-gray-50 rounded-lg px-3 py-2")
                    span= platformName
                    span(class="font-semibold text-gray-900")= socialData.followers ? socialData.followers.toLocaleString() + ' followers' : 'Scanning'
          if platformEntries.length
            div
              h3(class="text-xs font-semibold text-gray-400 uppercase tracking-wide mb-2") Platform readiness
              ul(class="space-y-2")
                each signal in platformEntries.slice(0, 3)
                  - const platformKey = signal[0];
                  - const platformData = signal[1] || {};
                  - const platformName = platformKey ? String(platformKey).replace(/_/g, ' ') : 'platform';
                  li(class="flex items-center justify-between text-sm text-gray-600 bg-gray-50 rounded-lg px-3 py-2")
                    span= platformName
                    span(class="font-semibold text-gray-900")= platformData.affinity ? Math.round(Number(platformData.affinity) * 100) + '% fit' : 'In review'
          if !benchmarkEntry && !socialEntries.length && !platformEntries.length
            p(class="text-sm text-gray-500") Benchmark and signal data will surface after the first full recommendation cycle.
      div(class="bg-white rounded-3xl shadow-sm ring-1 ring-gray-200 p-6")
        div(class="flex items-center justify-between mb-4")
          h2(class="text-lg font-semibold text-gray-900") Top channels
          span(class="text-xs font-medium text-gray-400") Ranked by blended efficiency
        if topScores.length
          ul(class="divide-y divide-gray-100")
            each channel in topScores
              - const breakdown = channel && channel.breakdown ? channel.breakdown : {};
              - const rationale = Array.isArray(channel && channel.rationale) ? channel.rationale : [];
              li(class="py-4 space-y-2")
                div(class="flex items-center justify-between")
                  span(class="text-base font-semibold text-gray-900")= channel && channel.name ? channel.name : 'Channel'
                  span(class="text-sm text-gray-500") Score #{Math.round(Number(channel && channel.score) || 0)}/100
                div(class="flex flex-wrap gap-3 text-xs uppercase tracking-wide text-gray-500")
                  span Efficiency #{breakdown && breakdown.efficiency ? Math.round(Number(breakdown.efficiency)) + '%' : 'â'}
                  span Conversion #{breakdown && breakdown.conversion ? Math.round(Number(breakdown.conversion)) + '%' : 'â'}
                  if breakdown && breakdown.cost
                    span Cost #{Math.round(Number(breakdown.cost))} pts
                if rationale.length
                  p(class="text-sm text-gray-600 leading-relaxed")= rationale.join(' Â· ')
        else
          p(class="text-sm text-gray-500") Run a refresh to surface ranked media channels for this entity.
    script(src="https://cdn.jsdelivr.net/npm/chart.js@4.4.4/dist/chart.umd.min.js")
    script.
      (function () {
        const channelScores = !{JSON.stringify(channelScores)};
        const allocation = !{JSON.stringify(budgetAllocation)};
        const refreshBtn = document.getElementById('coreRefreshBtn');
        const statusEl = document.getElementById('coreRefreshStatus');
        const rankingCtx = document.getElementById('coreChannelChart');
        const budgetCtx = document.getElementById('coreBudgetChart');

        if (rankingCtx && Array.isArray(channelScores) && channelScores.length && typeof Chart !== 'undefined') {
          new Chart(rankingCtx, {
            type: 'bar',
            data: {
              labels: channelScores.map((channel) => (channel && channel.name) || 'Channel'),
              datasets: [{
                label: 'Effectiveness score',
                data: channelScores.map((channel) => Number(channel && channel.score) || 0),
                backgroundColor: '#14b8a6',
                borderRadius: 6
              }]
            },
            options: {
              responsive: true,
              plugins: {
                legend: { display: false }
              },
              scales: {
                x: {
                  ticks: { color: '#64748b' },
                  grid: { display: false }
                },
                y: {
                  suggestedMax: 100,
                  ticks: { color: '#94a3b8' },
                  grid: { color: 'rgba(148, 163, 184, 0.2)' }
                }
              }
            }
          });
        }

        if (budgetCtx && Array.isArray(allocation) && allocation.length && typeof Chart !== 'undefined') {
          new Chart(budgetCtx, {
            type: 'doughnut',
            data: {
              labels: allocation.map((item) => (item && item.name) || 'Channel'),
              datasets: [{
                data: allocation.map((item) => {
                  const budget = item && item.budget ? item.budget : 0;
                  if (typeof budget === 'number') return budget;
                  return Number((budget && (budget.avg || budget.high || budget.low)) || 0);
                }),
                backgroundColor: ['#14b8a6', '#0ea5e9', '#6366f1', '#f97316', '#facc15']
              }]
            },
            options: {
              plugins: {
                legend: { position: 'bottom', labels: { color: '#64748b' } }
              }
            }
          });
        }

        if (refreshBtn) {
          refreshBtn.addEventListener('click', async () => {
            refreshBtn.disabled = true;
            refreshBtn.classList.add('opacity-60', 'pointer-events-none');
            if (statusEl) statusEl.textContent = 'Refreshing recommendationsâ¦';
            try {
              const response = await fetch('/core/api/refresh', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
              });
              if (!response.ok) throw new Error('Request failed');
              window.location.reload();
            } catch (error) {
              console.error('[CORE] refresh error', error);
              if (statusEl) statusEl.textContent = 'Refresh failed. Please try again shortly.';
            } finally {
              refreshBtn.disabled = false;
              refreshBtn.classList.remove('opacity-60', 'pointer-events-none');
            }
          });
        }
      })();

